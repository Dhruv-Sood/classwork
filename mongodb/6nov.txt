db.createCollection("students");
db.students.insertOne({ name: "John", age: 20, grade: "B" });
db.students.find();
db.students.find({ age: { $gt: 18 } });
db.students.find({ age: { $gt: 18, $lt: 23 } });
db.students.updateOne({ name: "John" }, { $set: { grade: "A" } });
db.students.deleteOne({ name: "Emily" });


Assignment-5

1. Students with Different Grades:
Query to find all students whose `grade` is not 'A'. Display `name` and `grade` fields.

db.students.find(
    { grade: { $ne: "A" } },
    { name: 1, grade: 1, _id: 0 }
)

2. Find Young Students:
Query to find all students who are younger than 18. Display `name`, `age`, and `class` in results.

db.students.find(
    { age: { $lt: 18 } },
    { name: 1, age: 1, class: 1, _id: 0 }
)

3. Locate Senior Employees:
Query to find employees whose `experience` is greater than 10 years. Display `name` and `department`.

db.employees.find(
    { experience: { $gt: 10 } },
    { name: 1, department: 1, _id: 0 }
)

4. Course Duration Filter:
Retrieve courses where the `duration` is at least 12 weeks. Display `course_name` and `instructor`.

db.courses.find(
    { duration: { $gte: 12 } },
    { course_name: 1, instructor: 1, _id: 0 }
)

5. Affordable Items:
Query to find items where `price` is at most $100. Display `item_name` and `price`.

db.inventory.find(
    { price: { $lte: 100 } },
    { item_name: 1, price: 1, _id: 0 }
)

6. Students with Specific Names:
Find students whose `name` is either 'Alice', 'Bob', or 'Charlie'. Display `name` and `roll`.

db.students.find(
    { name: { $in: ["Alice", "Bob", "Charlie"] } },
    { name: 1, roll: 1, _id: 0 }
)

7. Book Page Range:
Find books with `pages` more than 150 and less than 500. Display `title` and `pages`.

db.library.find(
    { pages: { $gt: 150, $lt: 500 } },
    { title: 1, pages: 1, _id: 0 }
)

8. Non-HR Employees with High Salary:
Find employees whose `department` is not 'HR' and `salary` is above $60,000. Display `name` and `salary`.

db.employees.find(
    { department: { $ne: "HR" }, salary: { $gt: 60000 } },
    { name: 1, salary: 1, _id: 0 }
)

9. Check Order Status:
Find orders where `status` is either 'completed' or 'in progress'. Display `order_id` and `status`.

db.orders.find(
    { status: { $in: ["completed", "in progress"] } },
    { order_id: 1, status: 1, _id: 0 }
)

10. Roll Number and Department Criteria:
Find students whose `roll` number is at least 500 and `department` is one of ['Biology', 'Chemistry', 'Physics']. Display `name`, `roll`, and `department`.

db.students.find(
    { roll: { $gte: 500 }, department: { $in: ["Biology", "Chemistry", "Physics"] } },
    { name: 1, roll: 1, department: 1, _id: 0 }
)